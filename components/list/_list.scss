/*doc
---
title: Lists
name: list
category: Base CSS
---

By default, all lists are plain with no bullets or numbers and have
generous spacing. We have several classes for lists that can be mixed
and matched as desired (though there are some silly combinations such as
`listBulleted listUnbulleted` that you probably want to avoid).

Lists can be safely nested as well:

```html_example
<ul class="listInline">
  <li>
    <ul class="listBulleted">
      <li>Price: $1,350,000</li>
      <li>4 Bedrooms</li>
      <li>Zip:
        <a href="">94109</a>
      </li>
    </ul>
  </li>
  <li>
    <ul class="listBulleted">
      <li>Status: For Sale</li>
      <li>2 full, 1 partial bathrooms</li>
      <li>Neighborhood:
        <a href="">Nob Hill</a>
      </li>
    </ul>
  </li>
  <li>
    <ul class="listBulleted">
      <li>MLS/Source ID: 404350</li>
      <li>Condo</li>
    </ul>
  </li>
</ul>
````

*/


@import "compass/css3/columns";


// List Mixin
@mixin ooList() {
  ol,
  ul {
    @extend %baseSpacing;
    list-style-type: none;
  
    > li {
      margin: .2em 0;
    }
  }
}


$whitespace-keys: (l padding, a '', v -top -bottom, h -left -right);
@function expand-whitespace-key($k) {
  @each $pair in $whitespace-keys {
    $short: nth($pair, 1);
    $long: nth($pair, 2);
    
    // v and h need to pass in 2 parameters
    @if (length($pair) == 3) {
      $long: (nth($pair, 2) nth($pair, 3))
    }
    @if $short == $k {
      @return $long;
    }
  }
  @warn "Couldn't expand #{$k}";
  @return $k;
}


// ListWhitespace Mixin
@mixin listWhitespace($sizes: (5px, 10px, 20px)) {
 
  //for now assume this list is always ascending
  // build list spacing exceptions
  $sizes: join(0, $sizes);
  $size-names: ();
  @if (length($sizes) == 1) {
    $size-names: (n);
    @warn "One spacing class isn't usually enough. Typically you should choose at least three.";
  } @else if (length($sizes) == 2) {
    $size-names: (n, s);
    @warn "Two spacing classes isn't usually enough. Typically you should choose at least three.";
  } @else if (length($sizes) == 3) {
    $size-names: (n, s, m);
  } @else if (length($sizes) == 4) {
    $size-names: (n, s, m, l);
  } @else if (length($sizes) == 5) {
    $size-names: (n, s, m, l, xl);
  } @else if (length($sizes) < 5){
    $size-names: (n, xs, s, m, l, xl);
    @warn "No more than five spacing classes are supported, typically you want to have three.";
  }
  $types: (l);
  $locations: (v, h);
  @each $location in $locations {
    @each $size-name in $size-names {
      @each $type in $types {
        .#{$type}#{$location}#{$size-name} > li {
          //get returned list of locations. Can't assign to variable as it turns into 1 item in the list, not multiple items
          @each $whitespace-location in expand-whitespace-key($location) {
            #{expand-whitespace-key($type)}#{$whitespace-location}: nth($sizes, index($size-names, $size-name));
          }
        }
      }
    }
  }

}

@mixin listColumns($list) {
  // space between columns in percentage
  @each $number in $list {
    $gap: 2;
    $totalPercentageGap: $gap * ($number - 1);
    
    .list#{$number}Cols {
      @include column-count($number);
      @include column-gap(percentage($gap/100));
      @include column-width(((100 - $totalPercentageGap) / $number) + '%');
    }
  }
}
