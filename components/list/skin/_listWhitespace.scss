/*doc
---
parent: list
name: listWhitespace
title: List Whitespacing
---

Lists have a number of helper classes to control the spacing around the
list items. These classes are all three character classes that look
like: `lvn` or `lhs`. Each character in the spacing class corresponds to
`<type><location><size>`

Type         |            | Description
--------     | ---------- | -----------
l            | list       | Specifies spacing for li items (as opposed to padding or margin, `pan` or `mvn`)
**Location** |            |
h            | horizontal | Adds spacing to the left and right of the li
v            | vertical   | Adds spacing to the top and bottom of the li
**Size**     |            |
l            | large      | Adds a large amount of spacing (21px)
m            | medium     | Adds a medium amount of spacing (10px)
s            | small      | Adds a small amount of spacing (5px)
n            | none       | Sets the spacing to 0


```html_example
<ul class="listBulleted lvs">
  <li>Status: For Sale</li>
  <li>2 full, 1 partial bathrooms</li>
  <li>Neighborhood:
    <a href="">Nob Hill</a>
  </li>
</ul>
```

```html_example
<ul class="listBulleted lvm">
  <li>Status: For Sale</li>
  <li>2 full, 1 partial bathrooms</li>
  <li>Neighborhood:
    <a href="">Nob Hill</a>
  </li>
</ul>
```
*/


// Keys
$whitespace-keys: (l padding, a '', v -top -bottom, h -left -right);


// Expand Whitespace Key Function 
@function expand-whitespace-key($k) {
  @each $pair in $whitespace-keys {
    $short: nth($pair, 1);
    $long: nth($pair, 2);
    
    // v and h need to pass in 2 parameters
    @if (length($pair) == 3) {
      $long: (nth($pair, 2) nth($pair, 3))
    }
    
    @if $short == $k {
      @return $long;
    }
  }
  @warn "Couldn't expand #{$k}";
  @return $k;
}


// ListWhitespace Mixin
@mixin listWhitespace($sizes: (5px, 10px, 20px)) {
  // For now assume this list is always ascending
  // Doc build list spacing exceptions
  $sizes: join(0, $sizes);
  $size-names: ();
  @if (length($sizes) == 1) {
    $size-names: (n);
    @warn "One spacing class isn't usually enough. Typically you should choose at least three.";
  } @else if (length($sizes) == 2) {
    $size-names: (n, s);
    @warn "Two spacing classes isn't usually enough. Typically you should choose at least three.";
  } @else if (length($sizes) == 3) {
    $size-names: (n, s, m);
  } @else if (length($sizes) == 4) {
    $size-names: (n, s, m, l);
  } @else if (length($sizes) == 5) {
    $size-names: (n, s, m, l, xl);
  } @else if (length($sizes) < 5){
    $size-names: (n, xs, s, m, l, xl);
    @warn "No more than five spacing classes are supported, typically you want to have three.";
  }
  $types: (l);
  $locations: (v, h);
  @each $location in $locations {
    @each $size-name in $size-names {
      @each $type in $types {
        .#{$type}#{$location}#{$size-name} > li {
          //get returned list of locations. Can't assign to variable as it turns into 1 item in the list, not multiple items
          @each $whitespace-location in expand-whitespace-key($location) {
            #{expand-whitespace-key($type)}#{$whitespace-location}: nth($sizes, index($size-names, $size-name));
          }
        }
      }
    }
  }

}

@mixin ooListWhitespace() {
	@include listWhitespace($spacingHelpers);
}
